#!/bin/bash -eu

export KDF_INSTALLER=1
. $(dirname $0)/index.bash

function _dotfiles-install {

	echo "$(tput smul)$(tput bold)Home directory...$(tput sgr0)"
	echo

	local src="$HOME/.krinkle.dotfiles"

	# Live links
	_dotfiles-ensure-link "$HOME/.ackrc" "$src/hosts/primary/ackrc"

	# These are copied instead of symlinked to allow local modification,
	# without affecting the Git repository status.
	_dotfiles-ensure-copy "$src/hosts/primary/bashrc" "$HOME/.bashrc"
	_dotfiles-ensure-copy "$src/hosts/primary/bash_profile" "$HOME/.bash_profile"
	_dotfiles-ensure-copy "$src/hosts/primary/bash_sessions_disable" "$HOME/.bash_sessions_disable"

	echo "$(tput setaf 2)>>$(tput sgr0) Home directory ready"

	# Homebrew
	echo "... check Homebrew"
	if [ -z "$(which brew)" ]
	then
		echo "$CLR_RED>> ERROR$CLR_NONE: Install Homebrew first"
		open http://brew.sh
		exit 1
	fi

	echo "... update Homebrew"
	brew update
	echo "... exec 'brew doctor'"
	brew doctor || _dotfiles-prompt-choice "Check out those warnings. Continue?"

	echo "... ensure Homebrew packages"
	formulas=(
		ack
		autojump
		bash
		bash-completion
		colordiff
		composer
		coreutils
		git
		# https://www.mediawiki.org/wiki/Gerrit/git-review#OS_X
		git-review
		hh
		jq
		node
		pwgen
		ruby
		# Tox to simplify managing Python venv and testing
		# - https://www.mediawiki.org/wiki/CI/JJB
		# - https://www.mediawiki.org/wiki/Zuul
		# - performance/navtiming
		# - etc.
		tox
		watch
		wget
	)
	for f in "${formulas[@]}"; do
		brew upgrade $f || brew install $f
	done
	brew upgrade php@7.3 || brew install php@7.3

	brew cleanup

	echo "... post-install: node"
	rm -f /usr/local/bin/npm

	echo "... post-install: php"
	test -f /usr/local/etc/php/7.3/conf.d/krinkle.ini || ( echo "linking php.ini" && ln -s $KDF_BASE_DIR/hosts/primary/php.ini /usr/local/etc/php/7.3/conf.d/krinkle.ini )
	pecl install apcu

	echo "... post-install: git"
	_dotfiles-ensure-link ~/.gitconfig "$KDF_BASE_DIR/hosts/primary/gitconfig"

	echo "... post-install: ssh"
	_dotfiles-ensure-link ~/.ssh/config "$KDF_BASE_DIR/hosts/primary/sshconfig"

	echo "... check Sublime Text"
	if [ -z "$(which subl)" ]
	then
		echo "$CLR_RED>> ERROR$CLR_NONE: Install Sublime Text and re-run the installer."
		open http://www.sublimetext.com/3
		exit 1
	fi

	echo "... post-install: Atom"
	tmpPath=$HOME/.atom/styles.less
	tmpDest=$KDF_BASE_DIR/hosts/primary/atom.styles.less
	_dotfiles-ensure-link "$tmpPath" "$tmpDest"

	echo "... post-install: Sublime Text"
	tmpPath="$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings"
	tmpDest=$KDF_BASE_DIR/hosts/primary/SublimePreferences.json
	_dotfiles-ensure-link "$tmpPath" "$tmpDest"

	tmpPath=$HOME/.config
	tmpDest=$KDF_BASE_DIR/hosts/primary/config
	_dotfiles-ensure-link "$tmpPath" "$tmpDest"


	# Create Finder Shortcut with descriptive name,
	# indexed by Spotlight for easy access.
	tmpSrcDir="$HOME/Applications"
	mkdir -p "$tmpSrcDir"
	tmpDest=$KDF_BASE_DIR/hosts/primary/bin/kdf-corners
	tmpSrcName="KDF Enable Corners"
	rm -f "$tmpSrcDir/$tmpSrcName"
	osascript <<EOF
tell application "Finder"
	make new alias to file (posix file "$tmpDest") at (posix file "$tmpSrcDir")
	set name of result to "$tmpSrcName"
end tell
EOF
	tmpDest=$KDF_BASE_DIR/hosts/primary/bin/kdf-nocorners
	tmpSrcName="KDF Disable Corners"
	rm -f "$tmpSrcDir/$tmpSrcName"
	osascript <<EOF
tell application "Finder"
	make new alias to file (posix file "$tmpDest") at (posix file "$tmpSrcDir")
	set name of result to "$tmpSrcName"
end tell
EOF
}

_dotfiles-install

echo
echo "$(tput setaf 2)>>$(tput sgr0) Installation complete"

# Re-source after install
. $(dirname $0)/index.bash
